plugins {
    id 'java'
    id 'eclipse'
    id 'idea'

    // Spring Boot & dependency management (compatible with Gradle 8 and Java 8 target)
    id 'org.springframework.boot' version '2.7.18'
    id 'io.spring.dependency-management' version '1.1.6'

    // Formatting
    id 'com.diffplug.spotless' version '6.25.0'

    // Container image build
    id 'com.google.cloud.tools.jib' version '3.3.1'

    // Code quality / coverage
    id 'org.sonarqube' version '4.4.1.3373'
    id 'jacoco'
}

// ---- Java compatibility ----
java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}
// Ensure 1.8 bytecode even if building on JDK 17+
tasks.withType(JavaCompile).configureEach {
    options.release = 8
}

// ---- Spring Boot packaging (fix deprecated baseName, etc.) ----
tasks.named('bootJar') {
    archiveBaseName.set('VulnerableApp')
    archiveVersion.set('1.0.0')
    // archiveClassifier.set('') // uncomment if you need a classifier
}

// ---- Repositories ----
repositories {
    mavenCentral()
    gradlePluginPortal()
    mavenLocal()
}

// ---- SonarQube ----
sonarqube {
    properties {
        property "sonar.projectKey", "SasanLabs_VulnerableApp"
        property "sonar.organization", "sasanlabs"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.java.source", "1.8"
        property "sonar.java.target", "1.8"
    }
}

// ---- Spotless (formatting) ----
spotless {
    java {
        clearSteps()
        googleJavaFormat().aosp()
    }
    format('javascript') {
        target 'src/main/resources/**/*.js'
        prettier().config(['filepath': 'file.js'])
    }
}

// ---- Jib (image build) ----
// NOTE: For local Docker daemon, run: ./gradlew jibDockerBuild -Dimage=vulnapp:local
jib {
    to {
        image = 'sasanlabs/owasp-vulnerableapp:unreleased'
    }

    // Enable multi-platform *except* when using jibDockerBuild (local daemon)
    if (!project.gradle.startParameter.taskNames.contains("jibDockerBuild")) {
        logger.info("JIB: Enabling Multi-Platform Images")
        from {
            image = 'openjdk:8-jre-alpine'
            platforms {
                platform {
                    architecture = 'amd64'
                    os = 'linux'
                }
                platform {
                    architecture = 'arm64'
                    os = 'linux'
                }
                platform {
                    architecture = '386'
                    os = 'linux'
                }
                platform {
                    architecture = 's390x'
                    os = 'linux'
                }
                platform {
                    architecture = 'ppc64le'
                    os = 'linux'
                }
            }
        }
    }
}

// ---- JaCoCo (Gradle 8 API) ----
jacoco {
    toolVersion = "0.8.5"
    reportsDirectory = layout.buildDirectory.dir("jacoco")
}

test {
    useJUnitPlatform()
    finalizedBy tasks.jacocoTestReport
}

tasks.jacocoTestReport {
    dependsOn tasks.test
    reports {
        xml.required.set(true)
        html.required.set(true)
        csv.required.set(false)
        xml.outputLocation.set(layout.buildDirectory.file("reports/jacoco.xml"))
    }
}

// ---- Custom helper task (unchanged logic) ----
tasks.register('GenerateSampleVulnerability') {
    group = 'SasanLabs'
    description = 'Generates Sample Vulnerability template'
    println 'Copying SampleVulnerability java file to org.sasanlabs.service.vulnerability.sampleVulnerability package'
    copy {
        from(file('src/main/resources/sampleVulnerability/sampleVulnerability'))
        into(file('src/main/java/org/sasanlabs/service/vulnerability/sampleVulnerability'))
    }
    println 'Copy of java file is completed'
    println 'Copying SampleVulnerability html/css/js files to static/templates/SampleVulnerability/LEVEL_1'
    copy {
        from(file('src/main/resources/sampleVulnerability/staticResources/LEVEL_1'))
        into(file('src/main/resources/static/templates/SampleVulnerability/LEVEL_1'))
    }
    println 'Copy of html/css/js files is completed'
    println 'SampleVulnerability is generated !!!'
    enabled = false
}

// ---- Dependencies ----
// For Spring Boot starters, let the BOM manage versions (no explicit versions below).
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'

    runtimeOnly 'com.h2database:h2'

    // 3rd party libs (keep versions)
    testImplementation 'org.mockito:mockito-core:3.5.13'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testImplementation 'org.assertj:assertj-core:3.17.2'

    implementation 'org.apache.commons:commons-text:1.8'
    implementation 'org.json:json:20190722'
    implementation 'com.nimbusds:nimbus-jose-jwt:9.31'
    implementation 'commons-io:commons-io:2.7'
    implementation 'io.github.sasanlabs:facade-schema:1.0.1'
    implementation 'commons-fileupload:commons-fileupload:1.5'
}

// Optional: reproducible archives (correct properties)
tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

